// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String?
  role      UserRole @default(CLIENT)
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  projects   Project[]
  reviews    Review[]
  designedProjects Project[] @relation("ProjectDesigner")

  @@map("users")
}

model Project {
  id          String      @id @default(cuid())
  title       String
  description String?
  status      ProjectStatus @default(PLANNING)
  clientId    String
  designerId  String?
  location    String?
  budget      Float?
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  client    User           @relation(fields: [clientId], references: [id])
  designer  User?          @relation("ProjectDesigner", fields: [designerId], references: [id])
  brief     DesignBrief?
  analysis  SiteAnalysis?
  moodBoard MoodBoard?
  layout    Layout?
  boq       BOQ?
  reviews   Review[]

  @@map("projects")
}

model DesignBrief {
  id          String   @id @default(cuid())
  projectId   String   @unique
  title       String
  description String
  style       String?
  colorScheme String?
  budget      Float?
  timeline    String?
  requirements String
  aiGenerated Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("design_briefs")
}

model SiteAnalysis {
  id           String   @id @default(cuid())
  projectId    String   @unique
  dimensions   String?
  roomType     String?
  existingFeatures String?
  constraints  String?
  photos       String?  // JSON string array of image URLs
  floorPlan    String?  // URL to floor plan image
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("site_analyses")
}

model MoodBoard {
  id          String   @id @default(cuid())
  projectId   String   @unique
  title       String
  description String?
  images      String?  // JSON string array of image URLs
  style       String?
  colorPalette String?
  aiGenerated Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("mood_boards")
}

model Layout {
  id          String   @id @default(cuid())
  projectId   String   @unique
  title       String
  description String?
  floorPlan   String?  // URL to floor plan image
  dimensions  String?
  furniture   String?  // JSON string data for furniture placement
  aiGenerated Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("layouts")
}

model BOQ {
  id          String   @id @default(cuid())
  projectId   String   @unique
  title       String
  description String?
  items       String?  // JSON string data for BOQ items
  totalCost   Float?
  currency    String   @default("USD")
  aiGenerated Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("boqs")
}

model Material {
  id          String   @id @default(cuid())
  name        String
  category    String
  description String?
  color       String?
  texture     String?
  price       Float?
  unit        String   @default("sq ft")
  imageUrl    String?
  supplier    String?
  sustainability String?
  tags        String?  // JSON string array of tags
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("materials")
}

model Furniture {
  id          String   @id @default(cuid())
  name        String
  category    String
  description String?
  dimensions  String?  // JSON string for dimensions (width, height, depth)
  style       String?
  color       String?
  material    String?
  price       Float?
  imageUrl    String?
  supplier    String?
  tags        String?  // JSON string array of tags
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("furniture")
}

model Review {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  rating    Int      // 1-5 rating
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

enum UserRole {
  CLIENT
  DESIGNER
  ADMIN
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  REVIEW
  COMPLETED
  CANCELLED
}